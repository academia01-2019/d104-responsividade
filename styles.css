body {
  background-color: lightgray;
  margin: 0;
}

.grid {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  grid-template-rows: repeat(5, minmax(30px, auto));
  grid-template-areas: 
    "header header header header header"
    "sidebar sidebar sidebar sidebar sidebar"
    "main main main main main";
}

header {
  align-items: center;
  display: flex;
  grid-area: header;
  justify-content: space-between;
  padding: 0 10px;
}

header nav {
  display: none;
}

/* :nth-child(x) é um seletor que busca elementos que sejam da mesma tag definida e que sejam o X filho de seu pai. No exemplo abaixo, o seletor pega somente uma tag <a> que seja, obrigatoriamente, a primeira filha de nav. Caso haja outro filho antes desse <a>, esse seletor não irá se aplicar a ninguém. */
header nav a:nth-child(1) {
  font-size: 14pt;
}

header nav a {
  text-decoration: none;
}

.menu-hamburguer {
  align-items: center;
  cursor: pointer;
  display: flex;
  flex-direction: column;
  justify-content: center;
  width: 30px;
}

.traco {
  background-color: black;
  border-radius: 50px;
  height: 3px;
  margin: 3px 0;
  width: 100%;
}

.sidebar {
  background-color: white;
  grid-area: sidebar;
  padding: 30px 0;
}

.sidebar nav {
  align-items: center;
  display: flex;
  justify-content: space-evenly;
}

.sidebar nav a {
  color: black;
  text-decoration: none;
}

main {
  grid-area: main;
}

/* Media Query */
/* 
Nós utilizamos media queries para definir condições para que determinados blocos de estilização sejam aplicados. A estrutura de declaração de um media query é:

@media(CONDIÇÃO) {
  *estilos específicos a serem aplicados*
}

Quando falamos de desenvolvimento mobile-first, as definições de estilo que vem antes do seu media query tem relação com como a versão do site mobile (em celulares) funciona. Quando você cria media queries, você precisa definir neles quais estilos que você gostaria de mudar em determinadas condições. Seguindo os exemplos abaixo, nós temos caso onde, por exemplo, queremos definir quando a nav e o menu-hamburguer devem aparecer. Nossas condições são todas utilizando a propriedade min-width, que quer dizer que a partir do valor definido para o min-width, aqueles estilos serão aplicados.
*/

/* Breakpoint para Tablet */
@media(min-width: 768px) {
  header nav {
    display: block;
  }
  
  .menu-hamburguer {
    display: none;
  }
}

/* 
Sendo assim, no query acima, definimos que a partir de uma largura de tela de 768px, a nav terá display: block (que deixa visível) e o menu-hamburguer, display: none (que deixa invisível).
 */

/* Breakpoint para Notebooks pequenos */
@media(min-width: 992px) {
  .grid {
    grid-template-areas: 
    "header header header header header"
    "main main main . sidebar"
    "main main main . sidebar";
  }

  .sidebar {
    border-radius: 25px;
    /* A propriedade box-shadow serve para criar sombras no seu elemento. Seus parâmetros são: 
    deslocamento horizontal da sombra, deslocamento vertical da sombra, quão borrada ela ficará, quanto ela se espalhará, e qual sua cor  */
    box-shadow: 1px 1px 15px 2px rgba(0, 0, 0, 0.1);
    margin: 5px;
  }

  .sidebar nav {
    flex-direction: column;
    justify-content: center;
  }
}

/* 
Já nesse query, nós definimos que o nosso elemento de classe sidebar irá ficar na lateral da página como uma aba "flutuante", posicionando-o com grid e adicionando box-shadow para fazer uma pequena sombra.
*/

/* Breakpoint para Notebooks grandes e Desktop */
@media(min-width: 1200px) {
 main {
  margin: auto;
  max-width: 1200px;
 } 
}

/* Por fim, definimos que nossa tag main, a partir de 1200px de largura, não deverá mais crescer (utilizando max-width), e utilizará margin: auto para se centralizar */